#!/usr/bin/env node

// entryPoint

// arguments management
const arguments = process.argv.slice(2)

if (arguments.length == 1 && (arguments[0] == '-h' || arguments[0] == '--help'))
    usage()

if (arguments.length != 6) {
    console.log("ERROR: Maybe you should read the README file or launch --help (or -h) option.")
    process.exit(84)
}

arguments.forEach((element, index) => {
    if (index < 5) {
        if (parseFloat(element) <= 0) {
            console.log("ERROR: radius inputs must be higher than zero.")
        }
    } else {
        if (parseInt(element) <= 0) {
            console.log("ERROR: number of points needed to display radius input must be higher than zero.")
        }
    }
});

let points = arguments[arguments.length - 1]

let rays = []
for (i = 0; i < 5; i++) {
    rays.push(parseFloat(arguments[i]))
}

// compute vectors
let vector1 = computeVector(0, rays) * 6
let vector2 = computeVector(1, rays) * 6
let vector3 = computeVector(2, rays) * 6

let vectors = [0]
vectors.push((vector1 - 0.5 * ((-vector1 + 4 * vector2 - vector3) / 7)) / 2)
vectors.push((-vector1 + 4 * vector2 - vector3) / 7)
vectors.push((vector3 - 0.5 * ((-vector1 + 4 * vector2 - vector3) / 7)) / 2)
vectors.push(0)

displayVectors(vectors)

// compute abscissas
let abscissas = []
let interval = 20.0 / (points - 1.0)
for (i = 0; i < points; i++)
    abscissas.push(interval * i)

let radius = []
abscissas.forEach(abscissa => {
    if (abscissa < 5)
        radius.push(computeRadius(vectors[1], vectors[0], abscissa, 5.0, 0.0, rays[1], rays[0]))
    else if (abscissa < 10)
        radius.push(computeRadius(vectors[2], vectors[1], abscissa, 10.0, 5.0, rays[2], rays[1]))
    else if (abscissa < 15)
        radius.push(computeRadius(vectors[3], vectors[2], abscissa, 15.0, 10.0, rays[3], rays[2]))
    else
        radius.push(computeRadius(vectors[4], vectors[3], abscissa, 20.0, 15.0, rays[4], rays[3]))
})

displayRadius(abscissas, radius)

// usefull functions
function computeVector(i, rays) {
    return (computeFx(i + 1, rays) - computeFx(i, rays)) / (((i + 2) * 5.0) - (i * 5.0))
}

function computeFx(i, rays) {
    return (rays[i + 1] - rays[i]) / (((i + 1) * 5.0) - (i * 5.0))
}

function displayVectors(vectors) {
    process.stdout.write("vectors results: [")
    vectors.forEach((value, index) => {
        if (value > -0.05 && value < 0.01)
            process.stdout.write("" + Math.abs(value).toFixed(1))
        else
            process.stdout.write("" + value.toFixed(1))
        index !== 4 ? process.stdout.write(", ") : console.log("]")
    })
}

function computeRadius(v, v1, x, xi, xi1, fx, fx1) {
    return -v1 * Math.pow(x - xi, 3) / 30.0 + v * Math.pow(x - xi1, 3) / 30.0 - (fx1 / 5.0 - (5.0 * v1 / 6.0)) * (x - xi) + (fx / 5.0 - 5.0 * v / 6.0) * (x - xi1)
}

function displayRadius(abscissas, radius) {
    radius.forEach((rad, index) => {
        console.log("abscissa: " + abscissas[index].toFixed(1) + " cm\tradius: " + radius[index].toFixed(1) + " cm")
    })
}

function usage() {
    console.log("USAGE")
    console.log("\t./reedpipes r0 r5 r10 r15 r20 n\n")
    console.log("DESCRIPTION")
    console.log("\tr0\tradius (in cm) of pipe at the 0cm abscissa")
    console.log("\tr5\tradius (in cm) of pipe at the 5cm abscissa")
    console.log("\tr10\tradius (in cm) of pipe at the 10cm abscissa")
    console.log("\tr15\tradius (in cm) of pipe at the 15cm abscissa")
    console.log("\tr20\tradius (in cm) of pipe at the 20cm abscissa")
    console.log("\tn\tnumber of points needed to display the radius")
}